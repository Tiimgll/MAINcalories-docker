from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from db import async_session
from models import User, Product, FoodEntry
from datetime import datetime

router = Router()

# üìå FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    height = State()

class ProductStates(StatesGroup):
    cal_per_100g = State()
    weight_g = State()

class AddFoodStates(StatesGroup):
    calories = State()
    description = State()

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.message(Command("start"))
async def start_registration(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user:
            await message.answer("üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info")
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–ú/–ñ):")
            await state.set_state(Registration.gender)

@router.message(Registration.gender)
async def process_gender_reg(message: types.Message, state: FSMContext):
    if message.text.upper() not in ["–ú", "–ñ"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ú –∏–ª–∏ –ñ.")
        return

    gender = "M" if message.text.upper() == "–ú" else "F"
    await state.update_data(gender=gender)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def process_age_reg(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
    await state.set_state(Registration.weight)

@router.message(Registration.weight)
async def process_weight_reg(message: types.Message, state: FSMContext):
    await state.update_data(weight=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):")
    await state.set_state(Registration.height)

@router.message(Registration.height)
async def process_height_reg(message: types.Message, state: FSMContext):
    await state.update_data(height=float(message.text))
    data = await state.get_data()

    async with async_session() as session:
        new_user = User(
            id_telegram=message.from_user.id,
            gender=data["gender"],
            age=data["age"],
            weight=data["weight"],
            height=data["height"]
        )
        session.add(new_user)
        await session.commit()

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /info.")
    await state.clear()

# üìå –ö–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
@router.message(Command("info"))
async def info_command(message: types.Message):
    text = (
        "üìã *–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:*\n\n"
        "/info ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
        "/add ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –µ–¥–µ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
        "/today ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "/mycalories ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ—é –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n\n"
        "/calcproduct ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –≤–µ—Å—É.\n\n"
        "/product ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é.\n\n"
        "/me ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç)."
    )
    await message.answer(text, parse_mode="Markdown")

@router.message(Command("mycalories"))
async def get_calories(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user is None:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        if user.gender == "M":
            bmr = 10 * user.weight + 6.25 * user.height - 5 * user.age + 5
        elif user.gender == "F":
            bmr = 10 * user.weight + 6.25 * user.height - 5 * user.age - 161
        else:
            await message.answer("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–ª–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ: /start")
            return

        await message.answer(f"üî• –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {round(bmr)} –∫–∫–∞–ª")

@router.message(Command("calcproduct"))
async def start_product_calc(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(ProductStates.cal_per_100g)

@router.message(ProductStates.cal_per_100g)
async def process_cal_per_100g(message: types.Message, state: FSMContext):
    await state.update_data(cal_per_100g=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    await state.set_state(ProductStates.weight_g)

@router.message(ProductStates.weight_g)
async def process_weight_g(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cal_per_100g = data["cal_per_100g"]
    weight_g = float(message.text)
    calories = (cal_per_100g / 100) * weight_g
    await message.answer(f"ü•ó –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {round(calories, 2)} –∫–∫–∞–ª")
    await state.clear()

@router.message(Command("product"))
async def list_products(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(Product))
        products = result.scalars().all()

        if not products:
            await message.answer("–ü–æ–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç.")
            return

        text = "üìã –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ 100 –≥:\n"
        for p in products:
            text += f"- {p.name} ‚Äî {p.cal_per_100g} –∫–∫–∞–ª\n"

        await message.answer(text)

@router.message(Command("add"))
async def add_food_entry(message: types.Message, state: FSMContext):
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π?")
    await state.set_state(AddFoodStates.calories)

@router.message(AddFoodStates.calories)
async def add_food_calories(message: types.Message, state: FSMContext):
    await state.update_data(calories=float(message.text))
    await message.answer("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –µ–ª–∏?")
    await state.set_state(AddFoodStates.description)

@router.message(AddFoodStates.description)
async def add_food_description(message: types.Message, state: FSMContext):
    data = await state.get_data()

    async with async_session() as session:
        entry = FoodEntry(
            user_id=message.from_user.id,
            calories=data["calories"],
            description=message.text,
            created_at=datetime.utcnow()
        )
        session.add(entry)
        await session.commit()

    await message.answer("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!")
    await state.clear()

@router.message(Command("today"))
async def show_today_entries(message: types.Message):
    now = datetime.utcnow()
    start_of_day = datetime(now.year, now.month, now.day)

    async with async_session() as session:
        result = await session.execute(
            select(FoodEntry).where(
                FoodEntry.user_id == message.from_user.id,
                FoodEntry.created_at >= start_of_day
            )
        )
        entries = result.scalars().all()

        if not entries:
            await message.answer("–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª–∏.")
            return

        text = "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ–ª:\n"
        for i, e in enumerate(entries, 1):
            text += f"{i}) {e.calories} –∫–∫–∞–ª ‚Äî {e.description}\n"

        await message.answer(text)

@router.message(Command("me"))
async def get_me(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user is None:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        gender_display = "–ú" if user.gender == "M" else "–ñ"

        await message.answer(
            f"üë§ –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"–ü–æ–ª: {gender_display}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
            f"–í–µ—Å: {user.weight} –∫–≥\n"
            f"–†–æ—Å—Ç: {user.height} —Å–º"
        )
