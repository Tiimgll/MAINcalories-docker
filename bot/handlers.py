from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from db import async_session
from models import User

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    gender = State()
    age = State()
    weight = State()
    height = State()

class ProductStates(StatesGroup):
    cal_per_100g = State()
    weight_g = State()

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("start"))
async def start_registration(message: types.Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user:
            await message.answer("üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_calories –∏–ª–∏ /calc_product.")
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (M/F):")
            await state.set_state(Registration.gender)

@router.message(Registration.gender)
async def process_gender_reg(message: types.Message, state: FSMContext):
    if message.text.upper() not in ["M", "F"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ M –∏–ª–∏ F.")
        return
    await state.update_data(gender=message.text.upper())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def process_age_reg(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
    await state.set_state(Registration.weight)

@router.message(Registration.weight)
async def process_weight_reg(message: types.Message, state: FSMContext):
    await state.update_data(weight=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):")
    await state.set_state(Registration.height)

@router.message(Registration.height)
async def process_height_reg(message: types.Message, state: FSMContext):
    await state.update_data(height=float(message.text))
    data = await state.get_data()

    async with async_session() as session:
        new_user = User(
            id_telegram=message.from_user.id,
            gender=data["gender"],
            age=data["age"],
            weight=data["weight"],
            height=data["height"]
        )
        session.add(new_user)
        await session.commit()

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_calories –∏ /calc_product.")
    await state.clear()

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –∏–∑ –ë–î
@router.message(Command("my_calories"))
async def get_calories(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user is None:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        if user.gender == "M":
            bmr = 10 * user.weight + 6.25 * user.height - 5 * user.age + 5
        elif user.gender == "F":
            bmr = 10 * user.weight + 6.25 * user.height - 5 * user.age - 161
        else:
            await message.answer("–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–ª–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ: /start")
            return

        await message.answer(f"üî• –í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {round(bmr)} –∫–∫–∞–ª")

# üìå –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("me"))
async def get_me(message: types.Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id_telegram == message.from_user.id))
        user = result.scalar_one_or_none()

        if user is None:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        await message.answer(
            f"üë§ –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"–ü–æ–ª: {user.gender}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
            f"–í–µ—Å: {user.weight} –∫–≥\n"
            f"–†–æ—Å—Ç: {user.height} —Å–º"
        )

# üìå –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(Command("calc_product"))
async def start_product_calc(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞ 100 –≥ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    await state.set_state(ProductStates.cal_per_100g)

@router.message(ProductStates.cal_per_100g)
async def process_cal_per_100g(message: types.Message, state: FSMContext):
    await state.update_data(cal_per_100g=float(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    await state.set_state(ProductStates.weight_g)

@router.message(ProductStates.weight_g)
async def process_weight_g(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cal_per_100g = data["cal_per_100g"]
    weight_g = float(message.text)

    calories = (cal_per_100g / 100) * weight_g
    await message.answer(f"ü•ó –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {round(calories, 2)} –∫–∫–∞–ª")
    await state.clear()
